// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIndexes(t *testing.T) {
	t.Parallel()

	query := Indexes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIndexesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndexesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Indexes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndexesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IndexSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIndexesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IndexExists(ctx, tx, o.Rowid)
	if err != nil {
		t.Errorf("Unable to check if Index exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IndexExists to return true, but got false.")
	}
}

func testIndexesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	indexFound, err := FindIndex(ctx, tx, o.Rowid)
	if err != nil {
		t.Error(err)
	}

	if indexFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIndexesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Indexes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIndexesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Indexes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIndexesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	indexOne := &Index{}
	indexTwo := &Index{}
	if err = randomize.Struct(seed, indexOne, indexDBTypes, false, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}
	if err = randomize.Struct(seed, indexTwo, indexDBTypes, false, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = indexOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = indexTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Indexes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIndexesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	indexOne := &Index{}
	indexTwo := &Index{}
	if err = randomize.Struct(seed, indexOne, indexDBTypes, false, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}
	if err = randomize.Struct(seed, indexTwo, indexDBTypes, false, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = indexOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = indexTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testIndexesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIndexesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(indexColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIndexesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIndexesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IndexSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIndexesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Indexes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	indexDBTypes = map[string]string{`Rowid`: `bigint`, `UUID`: `text`, `SuitNo`: `text`, `Title`: `text`, `Header`: `text`, `Court`: `text`, `Judgedate`: `text`, `Subbody`: `text`, `Type`: `integer`}
	_            = bytes.MinRead
)

func testIndexesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(indexPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(indexAllColumns) == len(indexPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, indexDBTypes, true, indexPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIndexesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(indexAllColumns) == len(indexPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Index{}
	if err = randomize.Struct(seed, o, indexDBTypes, true, indexColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, indexDBTypes, true, indexPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(indexAllColumns, indexPrimaryKeyColumns) {
		fields = indexAllColumns
	} else {
		fields = strmangle.SetComplement(
			indexAllColumns,
			indexPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IndexSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIndexesUpsert(t *testing.T) {
	t.Parallel()

	if len(indexAllColumns) == len(indexPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Index{}
	if err = randomize.Struct(seed, &o, indexDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Index: %s", err)
	}

	count, err := Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, indexDBTypes, false, indexPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Index struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Index: %s", err)
	}

	count, err = Indexes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
