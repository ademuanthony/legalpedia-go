// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Keyword is an object representing the database table.
type Keyword struct {
	ID               int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Text             null.String `boil:"text" json:"text,omitempty" toml:"text" yaml:"text,omitempty"`
	RatioCount       int         `boil:"ratio_count" json:"ratio_count" toml:"ratio_count" yaml:"ratio_count"`
	SummaryCount     int         `boil:"summary_count" json:"summary_count" toml:"summary_count" yaml:"summary_count"`
	ResultCount      int         `boil:"result_count" json:"result_count" toml:"result_count" yaml:"result_count"`
	LastIndexingDate time.Time   `boil:"last_indexing_date" json:"last_indexing_date" toml:"last_indexing_date" yaml:"last_indexing_date"`
	Version          time.Time   `boil:"version" json:"version" toml:"version" yaml:"version"`

	R *keywordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L keywordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KeywordColumns = struct {
	ID               string
	Text             string
	RatioCount       string
	SummaryCount     string
	ResultCount      string
	LastIndexingDate string
	Version          string
}{
	ID:               "Id",
	Text:             "text",
	RatioCount:       "ratio_count",
	SummaryCount:     "summary_count",
	ResultCount:      "result_count",
	LastIndexingDate: "last_indexing_date",
	Version:          "version",
}

// Generated where

var KeywordWhere = struct {
	ID               whereHelperint
	Text             whereHelpernull_String
	RatioCount       whereHelperint
	SummaryCount     whereHelperint
	ResultCount      whereHelperint
	LastIndexingDate whereHelpertime_Time
	Version          whereHelpertime_Time
}{
	ID:               whereHelperint{field: "\"keywords\".\"Id\""},
	Text:             whereHelpernull_String{field: "\"keywords\".\"text\""},
	RatioCount:       whereHelperint{field: "\"keywords\".\"ratio_count\""},
	SummaryCount:     whereHelperint{field: "\"keywords\".\"summary_count\""},
	ResultCount:      whereHelperint{field: "\"keywords\".\"result_count\""},
	LastIndexingDate: whereHelpertime_Time{field: "\"keywords\".\"last_indexing_date\""},
	Version:          whereHelpertime_Time{field: "\"keywords\".\"version\""},
}

// KeywordRels is where relationship names are stored.
var KeywordRels = struct {
}{}

// keywordR is where relationships are stored.
type keywordR struct {
}

// NewStruct creates a new relationship struct
func (*keywordR) NewStruct() *keywordR {
	return &keywordR{}
}

// keywordL is where Load methods for each relationship are stored.
type keywordL struct{}

var (
	keywordAllColumns            = []string{"Id", "text", "ratio_count", "summary_count", "result_count", "last_indexing_date", "version"}
	keywordColumnsWithoutDefault = []string{"text", "ratio_count", "summary_count", "result_count", "last_indexing_date", "version"}
	keywordColumnsWithDefault    = []string{"Id"}
	keywordPrimaryKeyColumns     = []string{"Id"}
)

type (
	// KeywordSlice is an alias for a slice of pointers to Keyword.
	// This should generally be used opposed to []Keyword.
	KeywordSlice []*Keyword

	keywordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	keywordType                 = reflect.TypeOf(&Keyword{})
	keywordMapping              = queries.MakeStructMapping(keywordType)
	keywordPrimaryKeyMapping, _ = queries.BindMapping(keywordType, keywordMapping, keywordPrimaryKeyColumns)
	keywordInsertCacheMut       sync.RWMutex
	keywordInsertCache          = make(map[string]insertCache)
	keywordUpdateCacheMut       sync.RWMutex
	keywordUpdateCache          = make(map[string]updateCache)
	keywordUpsertCacheMut       sync.RWMutex
	keywordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single keyword record from the query.
func (q keywordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Keyword, error) {
	o := &Keyword{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for keywords")
	}

	return o, nil
}

// All returns all Keyword records from the query.
func (q keywordQuery) All(ctx context.Context, exec boil.ContextExecutor) (KeywordSlice, error) {
	var o []*Keyword

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Keyword slice")
	}

	return o, nil
}

// Count returns the count of all Keyword records in the query.
func (q keywordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count keywords rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q keywordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if keywords exists")
	}

	return count > 0, nil
}

// Keywords retrieves all the records using an executor.
func Keywords(mods ...qm.QueryMod) keywordQuery {
	mods = append(mods, qm.From("\"keywords\""))
	return keywordQuery{NewQuery(mods...)}
}

// FindKeyword retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKeyword(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Keyword, error) {
	keywordObj := &Keyword{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"keywords\" where \"Id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, keywordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from keywords")
	}

	return keywordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Keyword) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no keywords provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(keywordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	keywordInsertCacheMut.RLock()
	cache, cached := keywordInsertCache[key]
	keywordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			keywordAllColumns,
			keywordColumnsWithDefault,
			keywordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(keywordType, keywordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(keywordType, keywordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"keywords\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"keywords\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into keywords")
	}

	if !cached {
		keywordInsertCacheMut.Lock()
		keywordInsertCache[key] = cache
		keywordInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Keyword.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Keyword) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	keywordUpdateCacheMut.RLock()
	cache, cached := keywordUpdateCache[key]
	keywordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			keywordAllColumns,
			keywordPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update keywords, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"keywords\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, keywordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(keywordType, keywordMapping, append(wl, keywordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update keywords row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for keywords")
	}

	if !cached {
		keywordUpdateCacheMut.Lock()
		keywordUpdateCache[key] = cache
		keywordUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q keywordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for keywords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for keywords")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KeywordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"keywords\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, keywordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in keyword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all keyword")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Keyword) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no keywords provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(keywordColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	keywordUpsertCacheMut.RLock()
	cache, cached := keywordUpsertCache[key]
	keywordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			keywordAllColumns,
			keywordColumnsWithDefault,
			keywordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			keywordAllColumns,
			keywordPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert keywords, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(keywordPrimaryKeyColumns))
			copy(conflict, keywordPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"keywords\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(keywordType, keywordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(keywordType, keywordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert keywords")
	}

	if !cached {
		keywordUpsertCacheMut.Lock()
		keywordUpsertCache[key] = cache
		keywordUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Keyword record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Keyword) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Keyword provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), keywordPrimaryKeyMapping)
	sql := "DELETE FROM \"keywords\" WHERE \"Id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from keywords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for keywords")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q keywordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no keywordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from keywords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for keywords")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KeywordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"keywords\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, keywordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from keyword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for keywords")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Keyword) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKeyword(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KeywordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KeywordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keywordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"keywords\".* FROM \"keywords\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, keywordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KeywordSlice")
	}

	*o = slice

	return nil
}

// KeywordExists checks if the Keyword row exists.
func KeywordExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"keywords\" where \"Id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if keywords exists")
	}

	return exists, nil
}
