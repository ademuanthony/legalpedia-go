// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KeywordRanking is an object representing the database table.
type KeywordRanking struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	KeywordID int64       `boil:"keyword_id" json:"keyword_id" toml:"keyword_id" yaml:"keyword_id"`
	Rank      int64       `boil:"rank" json:"rank" toml:"rank" yaml:"rank"`
	IndexID   int64       `boil:"index_id" json:"index_id" toml:"index_id" yaml:"index_id"`
	SuitNo    null.String `boil:"SuitNo" json:"SuitNo,omitempty" toml:"SuitNo" yaml:"SuitNo,omitempty"`
	Title     null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Header    null.String `boil:"header" json:"header,omitempty" toml:"header" yaml:"header,omitempty"`
	Court     null.String `boil:"court" json:"court,omitempty" toml:"court" yaml:"court,omitempty"`
	Judgedate null.String `boil:"judgedate" json:"judgedate,omitempty" toml:"judgedate" yaml:"judgedate,omitempty"`
	Subbody   null.String `boil:"subbody" json:"subbody,omitempty" toml:"subbody" yaml:"subbody,omitempty"`
	Type      int         `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *keywordRankingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L keywordRankingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KeywordRankingColumns = struct {
	ID        string
	KeywordID string
	Rank      string
	IndexID   string
	SuitNo    string
	Title     string
	Header    string
	Court     string
	Judgedate string
	Subbody   string
	Type      string
}{
	ID:        "id",
	KeywordID: "keyword_id",
	Rank:      "rank",
	IndexID:   "index_id",
	SuitNo:    "SuitNo",
	Title:     "title",
	Header:    "header",
	Court:     "court",
	Judgedate: "judgedate",
	Subbody:   "subbody",
	Type:      "type",
}

// Generated where

var KeywordRankingWhere = struct {
	ID        whereHelperint
	KeywordID whereHelperint64
	Rank      whereHelperint64
	IndexID   whereHelperint64
	SuitNo    whereHelpernull_String
	Title     whereHelpernull_String
	Header    whereHelpernull_String
	Court     whereHelpernull_String
	Judgedate whereHelpernull_String
	Subbody   whereHelpernull_String
	Type      whereHelperint
}{
	ID:        whereHelperint{field: "\"keyword_rankings\".\"id\""},
	KeywordID: whereHelperint64{field: "\"keyword_rankings\".\"keyword_id\""},
	Rank:      whereHelperint64{field: "\"keyword_rankings\".\"rank\""},
	IndexID:   whereHelperint64{field: "\"keyword_rankings\".\"index_id\""},
	SuitNo:    whereHelpernull_String{field: "\"keyword_rankings\".\"SuitNo\""},
	Title:     whereHelpernull_String{field: "\"keyword_rankings\".\"title\""},
	Header:    whereHelpernull_String{field: "\"keyword_rankings\".\"header\""},
	Court:     whereHelpernull_String{field: "\"keyword_rankings\".\"court\""},
	Judgedate: whereHelpernull_String{field: "\"keyword_rankings\".\"judgedate\""},
	Subbody:   whereHelpernull_String{field: "\"keyword_rankings\".\"subbody\""},
	Type:      whereHelperint{field: "\"keyword_rankings\".\"type\""},
}

// KeywordRankingRels is where relationship names are stored.
var KeywordRankingRels = struct {
}{}

// keywordRankingR is where relationships are stored.
type keywordRankingR struct {
}

// NewStruct creates a new relationship struct
func (*keywordRankingR) NewStruct() *keywordRankingR {
	return &keywordRankingR{}
}

// keywordRankingL is where Load methods for each relationship are stored.
type keywordRankingL struct{}

var (
	keywordRankingAllColumns            = []string{"id", "keyword_id", "rank", "index_id", "SuitNo", "title", "header", "court", "judgedate", "subbody", "type"}
	keywordRankingColumnsWithoutDefault = []string{"keyword_id", "rank", "index_id", "SuitNo", "title", "header", "court", "judgedate", "subbody", "type"}
	keywordRankingColumnsWithDefault    = []string{"id"}
	keywordRankingPrimaryKeyColumns     = []string{"id"}
)

type (
	// KeywordRankingSlice is an alias for a slice of pointers to KeywordRanking.
	// This should generally be used opposed to []KeywordRanking.
	KeywordRankingSlice []*KeywordRanking

	keywordRankingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	keywordRankingType                 = reflect.TypeOf(&KeywordRanking{})
	keywordRankingMapping              = queries.MakeStructMapping(keywordRankingType)
	keywordRankingPrimaryKeyMapping, _ = queries.BindMapping(keywordRankingType, keywordRankingMapping, keywordRankingPrimaryKeyColumns)
	keywordRankingInsertCacheMut       sync.RWMutex
	keywordRankingInsertCache          = make(map[string]insertCache)
	keywordRankingUpdateCacheMut       sync.RWMutex
	keywordRankingUpdateCache          = make(map[string]updateCache)
	keywordRankingUpsertCacheMut       sync.RWMutex
	keywordRankingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single keywordRanking record from the query.
func (q keywordRankingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KeywordRanking, error) {
	o := &KeywordRanking{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for keyword_rankings")
	}

	return o, nil
}

// All returns all KeywordRanking records from the query.
func (q keywordRankingQuery) All(ctx context.Context, exec boil.ContextExecutor) (KeywordRankingSlice, error) {
	var o []*KeywordRanking

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KeywordRanking slice")
	}

	return o, nil
}

// Count returns the count of all KeywordRanking records in the query.
func (q keywordRankingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count keyword_rankings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q keywordRankingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if keyword_rankings exists")
	}

	return count > 0, nil
}

// KeywordRankings retrieves all the records using an executor.
func KeywordRankings(mods ...qm.QueryMod) keywordRankingQuery {
	mods = append(mods, qm.From("\"keyword_rankings\""))
	return keywordRankingQuery{NewQuery(mods...)}
}

// FindKeywordRanking retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKeywordRanking(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*KeywordRanking, error) {
	keywordRankingObj := &KeywordRanking{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"keyword_rankings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, keywordRankingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from keyword_rankings")
	}

	return keywordRankingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KeywordRanking) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no keyword_rankings provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(keywordRankingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	keywordRankingInsertCacheMut.RLock()
	cache, cached := keywordRankingInsertCache[key]
	keywordRankingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			keywordRankingAllColumns,
			keywordRankingColumnsWithDefault,
			keywordRankingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(keywordRankingType, keywordRankingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(keywordRankingType, keywordRankingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"keyword_rankings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"keyword_rankings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into keyword_rankings")
	}

	if !cached {
		keywordRankingInsertCacheMut.Lock()
		keywordRankingInsertCache[key] = cache
		keywordRankingInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the KeywordRanking.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KeywordRanking) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	keywordRankingUpdateCacheMut.RLock()
	cache, cached := keywordRankingUpdateCache[key]
	keywordRankingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			keywordRankingAllColumns,
			keywordRankingPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update keyword_rankings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"keyword_rankings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, keywordRankingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(keywordRankingType, keywordRankingMapping, append(wl, keywordRankingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update keyword_rankings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for keyword_rankings")
	}

	if !cached {
		keywordRankingUpdateCacheMut.Lock()
		keywordRankingUpdateCache[key] = cache
		keywordRankingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q keywordRankingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for keyword_rankings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for keyword_rankings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KeywordRankingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keywordRankingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"keyword_rankings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, keywordRankingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in keywordRanking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all keywordRanking")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KeywordRanking) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no keyword_rankings provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(keywordRankingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	keywordRankingUpsertCacheMut.RLock()
	cache, cached := keywordRankingUpsertCache[key]
	keywordRankingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			keywordRankingAllColumns,
			keywordRankingColumnsWithDefault,
			keywordRankingColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			keywordRankingAllColumns,
			keywordRankingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert keyword_rankings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(keywordRankingPrimaryKeyColumns))
			copy(conflict, keywordRankingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"keyword_rankings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(keywordRankingType, keywordRankingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(keywordRankingType, keywordRankingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert keyword_rankings")
	}

	if !cached {
		keywordRankingUpsertCacheMut.Lock()
		keywordRankingUpsertCache[key] = cache
		keywordRankingUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single KeywordRanking record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KeywordRanking) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KeywordRanking provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), keywordRankingPrimaryKeyMapping)
	sql := "DELETE FROM \"keyword_rankings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from keyword_rankings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for keyword_rankings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q keywordRankingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no keywordRankingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from keyword_rankings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for keyword_rankings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KeywordRankingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keywordRankingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"keyword_rankings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, keywordRankingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from keywordRanking slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for keyword_rankings")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KeywordRanking) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKeywordRanking(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KeywordRankingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KeywordRankingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), keywordRankingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"keyword_rankings\".* FROM \"keyword_rankings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, keywordRankingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KeywordRankingSlice")
	}

	*o = slice

	return nil
}

// KeywordRankingExists checks if the KeywordRanking row exists.
func KeywordRankingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"keyword_rankings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if keyword_rankings exists")
	}

	return exists, nil
}
