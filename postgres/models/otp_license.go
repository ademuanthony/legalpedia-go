// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OtpLicense is an object representing the database table.
type OtpLicense struct {
	Rowid      int         `boil:"rowid" json:"rowid" toml:"rowid" yaml:"rowid"`
	Token      null.String `boil:"token" json:"token,omitempty" toml:"token" yaml:"token,omitempty"`
	LiveUpdate null.Time   `boil:"live_update" json:"live_update,omitempty" toml:"live_update" yaml:"live_update,omitempty"`
	CurDate    null.Time   `boil:"cur_date" json:"cur_date,omitempty" toml:"cur_date" yaml:"cur_date,omitempty"`

	R *otpLicenseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L otpLicenseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OtpLicenseColumns = struct {
	Rowid      string
	Token      string
	LiveUpdate string
	CurDate    string
}{
	Rowid:      "rowid",
	Token:      "token",
	LiveUpdate: "live_update",
	CurDate:    "cur_date",
}

// Generated where

var OtpLicenseWhere = struct {
	Rowid      whereHelperint
	Token      whereHelpernull_String
	LiveUpdate whereHelpernull_Time
	CurDate    whereHelpernull_Time
}{
	Rowid:      whereHelperint{field: "\"otp_license\".\"rowid\""},
	Token:      whereHelpernull_String{field: "\"otp_license\".\"token\""},
	LiveUpdate: whereHelpernull_Time{field: "\"otp_license\".\"live_update\""},
	CurDate:    whereHelpernull_Time{field: "\"otp_license\".\"cur_date\""},
}

// OtpLicenseRels is where relationship names are stored.
var OtpLicenseRels = struct {
}{}

// otpLicenseR is where relationships are stored.
type otpLicenseR struct {
}

// NewStruct creates a new relationship struct
func (*otpLicenseR) NewStruct() *otpLicenseR {
	return &otpLicenseR{}
}

// otpLicenseL is where Load methods for each relationship are stored.
type otpLicenseL struct{}

var (
	otpLicenseAllColumns            = []string{"rowid", "token", "live_update", "cur_date"}
	otpLicenseColumnsWithoutDefault = []string{"rowid", "token", "live_update", "cur_date"}
	otpLicenseColumnsWithDefault    = []string{}
	otpLicensePrimaryKeyColumns     = []string{"rowid"}
)

type (
	// OtpLicenseSlice is an alias for a slice of pointers to OtpLicense.
	// This should generally be used opposed to []OtpLicense.
	OtpLicenseSlice []*OtpLicense

	otpLicenseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	otpLicenseType                 = reflect.TypeOf(&OtpLicense{})
	otpLicenseMapping              = queries.MakeStructMapping(otpLicenseType)
	otpLicensePrimaryKeyMapping, _ = queries.BindMapping(otpLicenseType, otpLicenseMapping, otpLicensePrimaryKeyColumns)
	otpLicenseInsertCacheMut       sync.RWMutex
	otpLicenseInsertCache          = make(map[string]insertCache)
	otpLicenseUpdateCacheMut       sync.RWMutex
	otpLicenseUpdateCache          = make(map[string]updateCache)
	otpLicenseUpsertCacheMut       sync.RWMutex
	otpLicenseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single otpLicense record from the query.
func (q otpLicenseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OtpLicense, error) {
	o := &OtpLicense{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for otp_license")
	}

	return o, nil
}

// All returns all OtpLicense records from the query.
func (q otpLicenseQuery) All(ctx context.Context, exec boil.ContextExecutor) (OtpLicenseSlice, error) {
	var o []*OtpLicense

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OtpLicense slice")
	}

	return o, nil
}

// Count returns the count of all OtpLicense records in the query.
func (q otpLicenseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count otp_license rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q otpLicenseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if otp_license exists")
	}

	return count > 0, nil
}

// OtpLicenses retrieves all the records using an executor.
func OtpLicenses(mods ...qm.QueryMod) otpLicenseQuery {
	mods = append(mods, qm.From("\"otp_license\""))
	return otpLicenseQuery{NewQuery(mods...)}
}

// FindOtpLicense retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOtpLicense(ctx context.Context, exec boil.ContextExecutor, rowid int, selectCols ...string) (*OtpLicense, error) {
	otpLicenseObj := &OtpLicense{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"otp_license\" where \"rowid\"=$1", sel,
	)

	q := queries.Raw(query, rowid)

	err := q.Bind(ctx, exec, otpLicenseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from otp_license")
	}

	return otpLicenseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OtpLicense) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no otp_license provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(otpLicenseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	otpLicenseInsertCacheMut.RLock()
	cache, cached := otpLicenseInsertCache[key]
	otpLicenseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			otpLicenseAllColumns,
			otpLicenseColumnsWithDefault,
			otpLicenseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(otpLicenseType, otpLicenseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(otpLicenseType, otpLicenseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"otp_license\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"otp_license\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into otp_license")
	}

	if !cached {
		otpLicenseInsertCacheMut.Lock()
		otpLicenseInsertCache[key] = cache
		otpLicenseInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OtpLicense.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OtpLicense) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	otpLicenseUpdateCacheMut.RLock()
	cache, cached := otpLicenseUpdateCache[key]
	otpLicenseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			otpLicenseAllColumns,
			otpLicensePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update otp_license, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"otp_license\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, otpLicensePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(otpLicenseType, otpLicenseMapping, append(wl, otpLicensePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update otp_license row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for otp_license")
	}

	if !cached {
		otpLicenseUpdateCacheMut.Lock()
		otpLicenseUpdateCache[key] = cache
		otpLicenseUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q otpLicenseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for otp_license")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for otp_license")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OtpLicenseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpLicensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"otp_license\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, otpLicensePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in otpLicense slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all otpLicense")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OtpLicense) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no otp_license provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(otpLicenseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	otpLicenseUpsertCacheMut.RLock()
	cache, cached := otpLicenseUpsertCache[key]
	otpLicenseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			otpLicenseAllColumns,
			otpLicenseColumnsWithDefault,
			otpLicenseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			otpLicenseAllColumns,
			otpLicensePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert otp_license, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(otpLicensePrimaryKeyColumns))
			copy(conflict, otpLicensePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"otp_license\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(otpLicenseType, otpLicenseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(otpLicenseType, otpLicenseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert otp_license")
	}

	if !cached {
		otpLicenseUpsertCacheMut.Lock()
		otpLicenseUpsertCache[key] = cache
		otpLicenseUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OtpLicense record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OtpLicense) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OtpLicense provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), otpLicensePrimaryKeyMapping)
	sql := "DELETE FROM \"otp_license\" WHERE \"rowid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from otp_license")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for otp_license")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q otpLicenseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no otpLicenseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from otp_license")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for otp_license")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OtpLicenseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpLicensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"otp_license\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, otpLicensePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from otpLicense slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for otp_license")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OtpLicense) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOtpLicense(ctx, exec, o.Rowid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OtpLicenseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OtpLicenseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpLicensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"otp_license\".* FROM \"otp_license\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, otpLicensePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OtpLicenseSlice")
	}

	*o = slice

	return nil
}

// OtpLicenseExists checks if the OtpLicense row exists.
func OtpLicenseExists(ctx context.Context, exec boil.ContextExecutor, rowid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"otp_license\" where \"rowid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, rowid)
	}
	row := exec.QueryRowContext(ctx, sql, rowid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if otp_license exists")
	}

	return exists, nil
}
