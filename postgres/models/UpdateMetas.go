// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UpdateMetas is an object representing the database table.
type UpdateMetas struct {
	ID           int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Date         null.Time   `boil:"Date" json:"Date,omitempty" toml:"Date" yaml:"Date,omitempty"`
	Size         null.Int    `boil:"Size" json:"Size,omitempty" toml:"Size" yaml:"Size,omitempty"`
	Description  null.String `boil:"Description" json:"Description,omitempty" toml:"Description" yaml:"Description,omitempty"`
	DownloadLink null.String `boil:"DownloadLink" json:"DownloadLink,omitempty" toml:"DownloadLink" yaml:"DownloadLink,omitempty"`

	R *updateMetasR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L updateMetasL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpdateMetasColumns = struct {
	ID           string
	Date         string
	Size         string
	Description  string
	DownloadLink string
}{
	ID:           "Id",
	Date:         "Date",
	Size:         "Size",
	Description:  "Description",
	DownloadLink: "DownloadLink",
}

// Generated where

var UpdateMetasWhere = struct {
	ID           whereHelperint
	Date         whereHelpernull_Time
	Size         whereHelpernull_Int
	Description  whereHelpernull_String
	DownloadLink whereHelpernull_String
}{
	ID:           whereHelperint{field: "\"UpdateMetas\".\"Id\""},
	Date:         whereHelpernull_Time{field: "\"UpdateMetas\".\"Date\""},
	Size:         whereHelpernull_Int{field: "\"UpdateMetas\".\"Size\""},
	Description:  whereHelpernull_String{field: "\"UpdateMetas\".\"Description\""},
	DownloadLink: whereHelpernull_String{field: "\"UpdateMetas\".\"DownloadLink\""},
}

// UpdateMetasRels is where relationship names are stored.
var UpdateMetasRels = struct {
}{}

// updateMetasR is where relationships are stored.
type updateMetasR struct {
}

// NewStruct creates a new relationship struct
func (*updateMetasR) NewStruct() *updateMetasR {
	return &updateMetasR{}
}

// updateMetasL is where Load methods for each relationship are stored.
type updateMetasL struct{}

var (
	updateMetasAllColumns            = []string{"Id", "Date", "Size", "Description", "DownloadLink"}
	updateMetasColumnsWithoutDefault = []string{"Id", "Date", "Size", "Description", "DownloadLink"}
	updateMetasColumnsWithDefault    = []string{}
	updateMetasPrimaryKeyColumns     = []string{"Id"}
)

type (
	// UpdateMetasSlice is an alias for a slice of pointers to UpdateMetas.
	// This should generally be used opposed to []UpdateMetas.
	UpdateMetasSlice []*UpdateMetas

	updateMetasQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	updateMetasType                 = reflect.TypeOf(&UpdateMetas{})
	updateMetasMapping              = queries.MakeStructMapping(updateMetasType)
	updateMetasPrimaryKeyMapping, _ = queries.BindMapping(updateMetasType, updateMetasMapping, updateMetasPrimaryKeyColumns)
	updateMetasInsertCacheMut       sync.RWMutex
	updateMetasInsertCache          = make(map[string]insertCache)
	updateMetasUpdateCacheMut       sync.RWMutex
	updateMetasUpdateCache          = make(map[string]updateCache)
	updateMetasUpsertCacheMut       sync.RWMutex
	updateMetasUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single updateMetas record from the query.
func (q updateMetasQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UpdateMetas, error) {
	o := &UpdateMetas{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for UpdateMetas")
	}

	return o, nil
}

// All returns all UpdateMetas records from the query.
func (q updateMetasQuery) All(ctx context.Context, exec boil.ContextExecutor) (UpdateMetasSlice, error) {
	var o []*UpdateMetas

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UpdateMetas slice")
	}

	return o, nil
}

// Count returns the count of all UpdateMetas records in the query.
func (q updateMetasQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count UpdateMetas rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q updateMetasQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if UpdateMetas exists")
	}

	return count > 0, nil
}

// UpdateMetas retrieves all the records using an executor.
func UpdateMetas(mods ...qm.QueryMod) updateMetasQuery {
	mods = append(mods, qm.From("\"UpdateMetas\""))
	return updateMetasQuery{NewQuery(mods...)}
}

// FindUpdateMetas retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpdateMetas(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UpdateMetas, error) {
	updateMetasObj := &UpdateMetas{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"UpdateMetas\" where \"Id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, updateMetasObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from UpdateMetas")
	}

	return updateMetasObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UpdateMetas) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no UpdateMetas provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(updateMetasColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	updateMetasInsertCacheMut.RLock()
	cache, cached := updateMetasInsertCache[key]
	updateMetasInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			updateMetasAllColumns,
			updateMetasColumnsWithDefault,
			updateMetasColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(updateMetasType, updateMetasMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(updateMetasType, updateMetasMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"UpdateMetas\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"UpdateMetas\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into UpdateMetas")
	}

	if !cached {
		updateMetasInsertCacheMut.Lock()
		updateMetasInsertCache[key] = cache
		updateMetasInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UpdateMetas.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UpdateMetas) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	updateMetasUpdateCacheMut.RLock()
	cache, cached := updateMetasUpdateCache[key]
	updateMetasUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			updateMetasAllColumns,
			updateMetasPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update UpdateMetas, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"UpdateMetas\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, updateMetasPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(updateMetasType, updateMetasMapping, append(wl, updateMetasPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update UpdateMetas row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for UpdateMetas")
	}

	if !cached {
		updateMetasUpdateCacheMut.Lock()
		updateMetasUpdateCache[key] = cache
		updateMetasUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q updateMetasQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for UpdateMetas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for UpdateMetas")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpdateMetasSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), updateMetasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"UpdateMetas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, updateMetasPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in updateMetas slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all updateMetas")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UpdateMetas) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no UpdateMetas provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(updateMetasColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	updateMetasUpsertCacheMut.RLock()
	cache, cached := updateMetasUpsertCache[key]
	updateMetasUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			updateMetasAllColumns,
			updateMetasColumnsWithDefault,
			updateMetasColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			updateMetasAllColumns,
			updateMetasPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert UpdateMetas, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(updateMetasPrimaryKeyColumns))
			copy(conflict, updateMetasPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"UpdateMetas\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(updateMetasType, updateMetasMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(updateMetasType, updateMetasMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert UpdateMetas")
	}

	if !cached {
		updateMetasUpsertCacheMut.Lock()
		updateMetasUpsertCache[key] = cache
		updateMetasUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UpdateMetas record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UpdateMetas) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UpdateMetas provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), updateMetasPrimaryKeyMapping)
	sql := "DELETE FROM \"UpdateMetas\" WHERE \"Id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from UpdateMetas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for UpdateMetas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q updateMetasQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no updateMetasQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from UpdateMetas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for UpdateMetas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpdateMetasSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), updateMetasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"UpdateMetas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, updateMetasPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from updateMetas slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for UpdateMetas")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UpdateMetas) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUpdateMetas(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpdateMetasSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UpdateMetasSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), updateMetasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"UpdateMetas\".* FROM \"UpdateMetas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, updateMetasPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpdateMetasSlice")
	}

	*o = slice

	return nil
}

// UpdateMetasExists checks if the UpdateMetas row exists.
func UpdateMetasExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"UpdateMetas\" where \"Id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if UpdateMetas exists")
	}

	return exists, nil
}
