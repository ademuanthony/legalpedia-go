// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SummaryRatio is an object representing the database table.
type SummaryRatio struct {
	ID      int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Heading null.String `boil:"Heading" json:"Heading,omitempty" toml:"Heading" yaml:"Heading,omitempty"`
	Body    null.String `boil:"Body" json:"Body,omitempty" toml:"Body" yaml:"Body,omitempty"`
	SuitNo  null.String `boil:"SuitNo" json:"SuitNo,omitempty" toml:"SuitNo" yaml:"SuitNo,omitempty"`
	Coram   null.String `boil:"Coram" json:"Coram,omitempty" toml:"Coram" yaml:"Coram,omitempty"`

	R *summaryRatioR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L summaryRatioL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SummaryRatioColumns = struct {
	ID      string
	Heading string
	Body    string
	SuitNo  string
	Coram   string
}{
	ID:      "Id",
	Heading: "Heading",
	Body:    "Body",
	SuitNo:  "SuitNo",
	Coram:   "Coram",
}

// Generated where

var SummaryRatioWhere = struct {
	ID      whereHelperint
	Heading whereHelpernull_String
	Body    whereHelpernull_String
	SuitNo  whereHelpernull_String
	Coram   whereHelpernull_String
}{
	ID:      whereHelperint{field: "\"SummaryRatios\".\"Id\""},
	Heading: whereHelpernull_String{field: "\"SummaryRatios\".\"Heading\""},
	Body:    whereHelpernull_String{field: "\"SummaryRatios\".\"Body\""},
	SuitNo:  whereHelpernull_String{field: "\"SummaryRatios\".\"SuitNo\""},
	Coram:   whereHelpernull_String{field: "\"SummaryRatios\".\"Coram\""},
}

// SummaryRatioRels is where relationship names are stored.
var SummaryRatioRels = struct {
}{}

// summaryRatioR is where relationships are stored.
type summaryRatioR struct {
}

// NewStruct creates a new relationship struct
func (*summaryRatioR) NewStruct() *summaryRatioR {
	return &summaryRatioR{}
}

// summaryRatioL is where Load methods for each relationship are stored.
type summaryRatioL struct{}

var (
	summaryRatioAllColumns            = []string{"Id", "Heading", "Body", "SuitNo", "Coram"}
	summaryRatioColumnsWithoutDefault = []string{"Id", "Heading", "Body", "SuitNo", "Coram"}
	summaryRatioColumnsWithDefault    = []string{}
	summaryRatioPrimaryKeyColumns     = []string{"Id"}
)

type (
	// SummaryRatioSlice is an alias for a slice of pointers to SummaryRatio.
	// This should generally be used opposed to []SummaryRatio.
	SummaryRatioSlice []*SummaryRatio

	summaryRatioQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	summaryRatioType                 = reflect.TypeOf(&SummaryRatio{})
	summaryRatioMapping              = queries.MakeStructMapping(summaryRatioType)
	summaryRatioPrimaryKeyMapping, _ = queries.BindMapping(summaryRatioType, summaryRatioMapping, summaryRatioPrimaryKeyColumns)
	summaryRatioInsertCacheMut       sync.RWMutex
	summaryRatioInsertCache          = make(map[string]insertCache)
	summaryRatioUpdateCacheMut       sync.RWMutex
	summaryRatioUpdateCache          = make(map[string]updateCache)
	summaryRatioUpsertCacheMut       sync.RWMutex
	summaryRatioUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single summaryRatio record from the query.
func (q summaryRatioQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SummaryRatio, error) {
	o := &SummaryRatio{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for SummaryRatios")
	}

	return o, nil
}

// All returns all SummaryRatio records from the query.
func (q summaryRatioQuery) All(ctx context.Context, exec boil.ContextExecutor) (SummaryRatioSlice, error) {
	var o []*SummaryRatio

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SummaryRatio slice")
	}

	return o, nil
}

// Count returns the count of all SummaryRatio records in the query.
func (q summaryRatioQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count SummaryRatios rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q summaryRatioQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if SummaryRatios exists")
	}

	return count > 0, nil
}

// SummaryRatios retrieves all the records using an executor.
func SummaryRatios(mods ...qm.QueryMod) summaryRatioQuery {
	mods = append(mods, qm.From("\"SummaryRatios\""))
	return summaryRatioQuery{NewQuery(mods...)}
}

// FindSummaryRatio retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSummaryRatio(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SummaryRatio, error) {
	summaryRatioObj := &SummaryRatio{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"SummaryRatios\" where \"Id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, summaryRatioObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from SummaryRatios")
	}

	return summaryRatioObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SummaryRatio) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SummaryRatios provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(summaryRatioColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	summaryRatioInsertCacheMut.RLock()
	cache, cached := summaryRatioInsertCache[key]
	summaryRatioInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			summaryRatioAllColumns,
			summaryRatioColumnsWithDefault,
			summaryRatioColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(summaryRatioType, summaryRatioMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(summaryRatioType, summaryRatioMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"SummaryRatios\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"SummaryRatios\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into SummaryRatios")
	}

	if !cached {
		summaryRatioInsertCacheMut.Lock()
		summaryRatioInsertCache[key] = cache
		summaryRatioInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SummaryRatio.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SummaryRatio) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	summaryRatioUpdateCacheMut.RLock()
	cache, cached := summaryRatioUpdateCache[key]
	summaryRatioUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			summaryRatioAllColumns,
			summaryRatioPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update SummaryRatios, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"SummaryRatios\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, summaryRatioPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(summaryRatioType, summaryRatioMapping, append(wl, summaryRatioPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update SummaryRatios row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for SummaryRatios")
	}

	if !cached {
		summaryRatioUpdateCacheMut.Lock()
		summaryRatioUpdateCache[key] = cache
		summaryRatioUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q summaryRatioQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for SummaryRatios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for SummaryRatios")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SummaryRatioSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summaryRatioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"SummaryRatios\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, summaryRatioPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in summaryRatio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all summaryRatio")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SummaryRatio) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SummaryRatios provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(summaryRatioColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	summaryRatioUpsertCacheMut.RLock()
	cache, cached := summaryRatioUpsertCache[key]
	summaryRatioUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			summaryRatioAllColumns,
			summaryRatioColumnsWithDefault,
			summaryRatioColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			summaryRatioAllColumns,
			summaryRatioPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert SummaryRatios, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(summaryRatioPrimaryKeyColumns))
			copy(conflict, summaryRatioPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"SummaryRatios\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(summaryRatioType, summaryRatioMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(summaryRatioType, summaryRatioMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert SummaryRatios")
	}

	if !cached {
		summaryRatioUpsertCacheMut.Lock()
		summaryRatioUpsertCache[key] = cache
		summaryRatioUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SummaryRatio record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SummaryRatio) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SummaryRatio provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), summaryRatioPrimaryKeyMapping)
	sql := "DELETE FROM \"SummaryRatios\" WHERE \"Id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from SummaryRatios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for SummaryRatios")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q summaryRatioQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no summaryRatioQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from SummaryRatios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SummaryRatios")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SummaryRatioSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summaryRatioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"SummaryRatios\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, summaryRatioPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summaryRatio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SummaryRatios")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SummaryRatio) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSummaryRatio(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SummaryRatioSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SummaryRatioSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summaryRatioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"SummaryRatios\".* FROM \"SummaryRatios\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, summaryRatioPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SummaryRatioSlice")
	}

	*o = slice

	return nil
}

// SummaryRatioExists checks if the SummaryRatio row exists.
func SummaryRatioExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"SummaryRatios\" where \"Id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if SummaryRatios exists")
	}

	return exists, nil
}
