// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TeamMember is an object representing the database table.
type TeamMember struct {
	ID     string      `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	TeamId null.String `boil:"TeamId" json:"TeamId,omitempty" toml:"TeamId" yaml:"TeamId,omitempty"`
	UserId int64       `boil:"UserId" json:"UserId" toml:"UserId" yaml:"UserId"`
	Role   int         `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`

	R *teamMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamMemberColumns = struct {
	ID     string
	TeamId string
	UserId string
	Role   string
}{
	ID:     "Id",
	TeamId: "TeamId",
	UserId: "UserId",
	Role:   "Role",
}

// Generated where

var TeamMemberWhere = struct {
	ID     whereHelperstring
	TeamId whereHelpernull_String
	UserId whereHelperint64
	Role   whereHelperint
}{
	ID:     whereHelperstring{field: "\"TeamMembers\".\"Id\""},
	TeamId: whereHelpernull_String{field: "\"TeamMembers\".\"TeamId\""},
	UserId: whereHelperint64{field: "\"TeamMembers\".\"UserId\""},
	Role:   whereHelperint{field: "\"TeamMembers\".\"Role\""},
}

// TeamMemberRels is where relationship names are stored.
var TeamMemberRels = struct {
	TeamIdTeam string
}{
	TeamIdTeam: "TeamIdTeam",
}

// teamMemberR is where relationships are stored.
type teamMemberR struct {
	TeamIdTeam *Team `boil:"TeamIdTeam" json:"TeamIdTeam" toml:"TeamIdTeam" yaml:"TeamIdTeam"`
}

// NewStruct creates a new relationship struct
func (*teamMemberR) NewStruct() *teamMemberR {
	return &teamMemberR{}
}

// teamMemberL is where Load methods for each relationship are stored.
type teamMemberL struct{}

var (
	teamMemberAllColumns            = []string{"Id", "TeamId", "UserId", "Role"}
	teamMemberColumnsWithoutDefault = []string{"Id", "TeamId", "UserId", "Role"}
	teamMemberColumnsWithDefault    = []string{}
	teamMemberPrimaryKeyColumns     = []string{"Id"}
)

type (
	// TeamMemberSlice is an alias for a slice of pointers to TeamMember.
	// This should generally be used opposed to []TeamMember.
	TeamMemberSlice []*TeamMember

	teamMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamMemberType                 = reflect.TypeOf(&TeamMember{})
	teamMemberMapping              = queries.MakeStructMapping(teamMemberType)
	teamMemberPrimaryKeyMapping, _ = queries.BindMapping(teamMemberType, teamMemberMapping, teamMemberPrimaryKeyColumns)
	teamMemberInsertCacheMut       sync.RWMutex
	teamMemberInsertCache          = make(map[string]insertCache)
	teamMemberUpdateCacheMut       sync.RWMutex
	teamMemberUpdateCache          = make(map[string]updateCache)
	teamMemberUpsertCacheMut       sync.RWMutex
	teamMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single teamMember record from the query.
func (q teamMemberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TeamMember, error) {
	o := &TeamMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for TeamMembers")
	}

	return o, nil
}

// All returns all TeamMember records from the query.
func (q teamMemberQuery) All(ctx context.Context, exec boil.ContextExecutor) (TeamMemberSlice, error) {
	var o []*TeamMember

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TeamMember slice")
	}

	return o, nil
}

// Count returns the count of all TeamMember records in the query.
func (q teamMemberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count TeamMembers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamMemberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if TeamMembers exists")
	}

	return count > 0, nil
}

// TeamIdTeam pointed to by the foreign key.
func (o *TeamMember) TeamIdTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"Id\" = ?", o.TeamId),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "\"Teams\"")

	return query
}

// LoadTeamIdTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamMemberL) LoadTeamIdTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamMember interface{}, mods queries.Applicator) error {
	var slice []*TeamMember
	var object *TeamMember

	if singular {
		object = maybeTeamMember.(*TeamMember)
	} else {
		slice = *maybeTeamMember.(*[]*TeamMember)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamMemberR{}
		}
		if !queries.IsNil(object.TeamId) {
			args = append(args, object.TeamId)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamMemberR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TeamId) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TeamId) {
				args = append(args, obj.TeamId)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.Id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TeamIdTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.TeamIdTeamMembers = append(foreign.R.TeamIdTeamMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamId, foreign.ID) {
				local.R.TeamIdTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.TeamIdTeamMembers = append(foreign.R.TeamIdTeamMembers, local)
				break
			}
		}
	}

	return nil
}

// SetTeamIdTeam of the teamMember to the related item.
// Sets o.R.TeamIdTeam to related.
// Adds o to related.R.TeamIdTeamMembers.
func (o *TeamMember) SetTeamIdTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"TeamMembers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"TeamId"}),
		strmangle.WhereClause("\"", "\"", 2, teamMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamId, related.ID)
	if o.R == nil {
		o.R = &teamMemberR{
			TeamIdTeam: related,
		}
	} else {
		o.R.TeamIdTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			TeamIdTeamMembers: TeamMemberSlice{o},
		}
	} else {
		related.R.TeamIdTeamMembers = append(related.R.TeamIdTeamMembers, o)
	}

	return nil
}

// RemoveTeamIdTeam relationship.
// Sets o.R.TeamIdTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamMember) RemoveTeamIdTeam(ctx context.Context, exec boil.ContextExecutor, related *Team) error {
	var err error

	queries.SetScanner(&o.TeamId, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("TeamId")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TeamIdTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TeamIdTeamMembers {
		if queries.Equal(o.TeamId, ri.TeamId) {
			continue
		}

		ln := len(related.R.TeamIdTeamMembers)
		if ln > 1 && i < ln-1 {
			related.R.TeamIdTeamMembers[i] = related.R.TeamIdTeamMembers[ln-1]
		}
		related.R.TeamIdTeamMembers = related.R.TeamIdTeamMembers[:ln-1]
		break
	}
	return nil
}

// TeamMembers retrieves all the records using an executor.
func TeamMembers(mods ...qm.QueryMod) teamMemberQuery {
	mods = append(mods, qm.From("\"TeamMembers\""))
	return teamMemberQuery{NewQuery(mods...)}
}

// FindTeamMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamMember(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TeamMember, error) {
	teamMemberObj := &TeamMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"TeamMembers\" where \"Id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, teamMemberObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from TeamMembers")
	}

	return teamMemberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamMember) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TeamMembers provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(teamMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamMemberInsertCacheMut.RLock()
	cache, cached := teamMemberInsertCache[key]
	teamMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamMemberAllColumns,
			teamMemberColumnsWithDefault,
			teamMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamMemberType, teamMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamMemberType, teamMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"TeamMembers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"TeamMembers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into TeamMembers")
	}

	if !cached {
		teamMemberInsertCacheMut.Lock()
		teamMemberInsertCache[key] = cache
		teamMemberInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TeamMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamMember) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	teamMemberUpdateCacheMut.RLock()
	cache, cached := teamMemberUpdateCache[key]
	teamMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamMemberAllColumns,
			teamMemberPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update TeamMembers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"TeamMembers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamMemberType, teamMemberMapping, append(wl, teamMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update TeamMembers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for TeamMembers")
	}

	if !cached {
		teamMemberUpdateCacheMut.Lock()
		teamMemberUpdateCache[key] = cache
		teamMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q teamMemberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for TeamMembers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for TeamMembers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamMemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"TeamMembers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamMemberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in teamMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all teamMember")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamMember) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no TeamMembers provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(teamMemberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamMemberUpsertCacheMut.RLock()
	cache, cached := teamMemberUpsertCache[key]
	teamMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamMemberAllColumns,
			teamMemberColumnsWithDefault,
			teamMemberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			teamMemberAllColumns,
			teamMemberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert TeamMembers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(teamMemberPrimaryKeyColumns))
			copy(conflict, teamMemberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"TeamMembers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(teamMemberType, teamMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamMemberType, teamMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert TeamMembers")
	}

	if !cached {
		teamMemberUpsertCacheMut.Lock()
		teamMemberUpsertCache[key] = cache
		teamMemberUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TeamMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamMember) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TeamMember provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamMemberPrimaryKeyMapping)
	sql := "DELETE FROM \"TeamMembers\" WHERE \"Id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from TeamMembers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for TeamMembers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamMemberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no teamMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from TeamMembers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TeamMembers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamMemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"TeamMembers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamMemberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from teamMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for TeamMembers")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamMember) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTeamMember(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamMemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"TeamMembers\".* FROM \"TeamMembers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TeamMemberSlice")
	}

	*o = slice

	return nil
}

// TeamMemberExists checks if the TeamMember row exists.
func TeamMemberExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"TeamMembers\" where \"Id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if TeamMembers exists")
	}

	return exists, nil
}
