// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// JudgementPartiesB is an object representing the database table.
type JudgementPartiesB struct {
	ID          string      `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	PartyBNames null.String `boil:"PartyBNames" json:"PartyBNames,omitempty" toml:"PartyBNames" yaml:"PartyBNames,omitempty"`

	R *judgementPartiesBR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L judgementPartiesBL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JudgementPartiesBColumns = struct {
	ID          string
	PartyBNames string
}{
	ID:          "Id",
	PartyBNames: "PartyBNames",
}

// Generated where

var JudgementPartiesBWhere = struct {
	ID          whereHelperstring
	PartyBNames whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"JudgementPartiesB\".\"Id\""},
	PartyBNames: whereHelpernull_String{field: "\"JudgementPartiesB\".\"PartyBNames\""},
}

// JudgementPartiesBRels is where relationship names are stored.
var JudgementPartiesBRels = struct {
}{}

// judgementPartiesBR is where relationships are stored.
type judgementPartiesBR struct {
}

// NewStruct creates a new relationship struct
func (*judgementPartiesBR) NewStruct() *judgementPartiesBR {
	return &judgementPartiesBR{}
}

// judgementPartiesBL is where Load methods for each relationship are stored.
type judgementPartiesBL struct{}

var (
	judgementPartiesBAllColumns            = []string{"Id", "PartyBNames"}
	judgementPartiesBColumnsWithoutDefault = []string{"Id", "PartyBNames"}
	judgementPartiesBColumnsWithDefault    = []string{}
	judgementPartiesBPrimaryKeyColumns     = []string{"Id"}
)

type (
	// JudgementPartiesBSlice is an alias for a slice of pointers to JudgementPartiesB.
	// This should generally be used opposed to []JudgementPartiesB.
	JudgementPartiesBSlice []*JudgementPartiesB

	judgementPartiesBQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	judgementPartiesBType                 = reflect.TypeOf(&JudgementPartiesB{})
	judgementPartiesBMapping              = queries.MakeStructMapping(judgementPartiesBType)
	judgementPartiesBPrimaryKeyMapping, _ = queries.BindMapping(judgementPartiesBType, judgementPartiesBMapping, judgementPartiesBPrimaryKeyColumns)
	judgementPartiesBInsertCacheMut       sync.RWMutex
	judgementPartiesBInsertCache          = make(map[string]insertCache)
	judgementPartiesBUpdateCacheMut       sync.RWMutex
	judgementPartiesBUpdateCache          = make(map[string]updateCache)
	judgementPartiesBUpsertCacheMut       sync.RWMutex
	judgementPartiesBUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single judgementPartiesB record from the query.
func (q judgementPartiesBQuery) One(ctx context.Context, exec boil.ContextExecutor) (*JudgementPartiesB, error) {
	o := &JudgementPartiesB{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for JudgementPartiesB")
	}

	return o, nil
}

// All returns all JudgementPartiesB records from the query.
func (q judgementPartiesBQuery) All(ctx context.Context, exec boil.ContextExecutor) (JudgementPartiesBSlice, error) {
	var o []*JudgementPartiesB

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to JudgementPartiesB slice")
	}

	return o, nil
}

// Count returns the count of all JudgementPartiesB records in the query.
func (q judgementPartiesBQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count JudgementPartiesB rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q judgementPartiesBQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if JudgementPartiesB exists")
	}

	return count > 0, nil
}

// JudgementPartiesBs retrieves all the records using an executor.
func JudgementPartiesBs(mods ...qm.QueryMod) judgementPartiesBQuery {
	mods = append(mods, qm.From("\"JudgementPartiesB\""))
	return judgementPartiesBQuery{NewQuery(mods...)}
}

// FindJudgementPartiesB retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJudgementPartiesB(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*JudgementPartiesB, error) {
	judgementPartiesBObj := &JudgementPartiesB{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"JudgementPartiesB\" where \"Id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, judgementPartiesBObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from JudgementPartiesB")
	}

	return judgementPartiesBObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *JudgementPartiesB) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no JudgementPartiesB provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(judgementPartiesBColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	judgementPartiesBInsertCacheMut.RLock()
	cache, cached := judgementPartiesBInsertCache[key]
	judgementPartiesBInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			judgementPartiesBAllColumns,
			judgementPartiesBColumnsWithDefault,
			judgementPartiesBColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(judgementPartiesBType, judgementPartiesBMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(judgementPartiesBType, judgementPartiesBMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"JudgementPartiesB\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"JudgementPartiesB\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into JudgementPartiesB")
	}

	if !cached {
		judgementPartiesBInsertCacheMut.Lock()
		judgementPartiesBInsertCache[key] = cache
		judgementPartiesBInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the JudgementPartiesB.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *JudgementPartiesB) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	judgementPartiesBUpdateCacheMut.RLock()
	cache, cached := judgementPartiesBUpdateCache[key]
	judgementPartiesBUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			judgementPartiesBAllColumns,
			judgementPartiesBPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update JudgementPartiesB, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"JudgementPartiesB\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, judgementPartiesBPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(judgementPartiesBType, judgementPartiesBMapping, append(wl, judgementPartiesBPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update JudgementPartiesB row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for JudgementPartiesB")
	}

	if !cached {
		judgementPartiesBUpdateCacheMut.Lock()
		judgementPartiesBUpdateCache[key] = cache
		judgementPartiesBUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q judgementPartiesBQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for JudgementPartiesB")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for JudgementPartiesB")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JudgementPartiesBSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), judgementPartiesBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"JudgementPartiesB\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, judgementPartiesBPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in judgementPartiesB slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all judgementPartiesB")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *JudgementPartiesB) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no JudgementPartiesB provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(judgementPartiesBColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	judgementPartiesBUpsertCacheMut.RLock()
	cache, cached := judgementPartiesBUpsertCache[key]
	judgementPartiesBUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			judgementPartiesBAllColumns,
			judgementPartiesBColumnsWithDefault,
			judgementPartiesBColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			judgementPartiesBAllColumns,
			judgementPartiesBPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert JudgementPartiesB, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(judgementPartiesBPrimaryKeyColumns))
			copy(conflict, judgementPartiesBPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"JudgementPartiesB\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(judgementPartiesBType, judgementPartiesBMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(judgementPartiesBType, judgementPartiesBMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert JudgementPartiesB")
	}

	if !cached {
		judgementPartiesBUpsertCacheMut.Lock()
		judgementPartiesBUpsertCache[key] = cache
		judgementPartiesBUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single JudgementPartiesB record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *JudgementPartiesB) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no JudgementPartiesB provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), judgementPartiesBPrimaryKeyMapping)
	sql := "DELETE FROM \"JudgementPartiesB\" WHERE \"Id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from JudgementPartiesB")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for JudgementPartiesB")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q judgementPartiesBQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no judgementPartiesBQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from JudgementPartiesB")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for JudgementPartiesB")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JudgementPartiesBSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), judgementPartiesBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"JudgementPartiesB\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, judgementPartiesBPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from judgementPartiesB slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for JudgementPartiesB")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *JudgementPartiesB) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJudgementPartiesB(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JudgementPartiesBSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JudgementPartiesBSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), judgementPartiesBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"JudgementPartiesB\".* FROM \"JudgementPartiesB\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, judgementPartiesBPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JudgementPartiesBSlice")
	}

	*o = slice

	return nil
}

// JudgementPartiesBExists checks if the JudgementPartiesB row exists.
func JudgementPartiesBExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"JudgementPartiesB\" where \"Id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if JudgementPartiesB exists")
	}

	return exists, nil
}
