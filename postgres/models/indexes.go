// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Index is an object representing the database table.
type Index struct {
	Rowid     int64       `boil:"rowid" json:"rowid" toml:"rowid" yaml:"rowid"`
	UUID      null.String `boil:"uuid" json:"uuid,omitempty" toml:"uuid" yaml:"uuid,omitempty"`
	SuitNo    null.String `boil:"SuitNo" json:"SuitNo,omitempty" toml:"SuitNo" yaml:"SuitNo,omitempty"`
	Title     null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Header    null.String `boil:"header" json:"header,omitempty" toml:"header" yaml:"header,omitempty"`
	Court     null.String `boil:"court" json:"court,omitempty" toml:"court" yaml:"court,omitempty"`
	Judgedate null.String `boil:"judgedate" json:"judgedate,omitempty" toml:"judgedate" yaml:"judgedate,omitempty"`
	Subbody   null.String `boil:"subbody" json:"subbody,omitempty" toml:"subbody" yaml:"subbody,omitempty"`
	Type      int         `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *indexR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L indexL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IndexColumns = struct {
	Rowid     string
	UUID      string
	SuitNo    string
	Title     string
	Header    string
	Court     string
	Judgedate string
	Subbody   string
	Type      string
}{
	Rowid:     "rowid",
	UUID:      "uuid",
	SuitNo:    "SuitNo",
	Title:     "title",
	Header:    "header",
	Court:     "court",
	Judgedate: "judgedate",
	Subbody:   "subbody",
	Type:      "type",
}

// Generated where

var IndexWhere = struct {
	Rowid     whereHelperint64
	UUID      whereHelpernull_String
	SuitNo    whereHelpernull_String
	Title     whereHelpernull_String
	Header    whereHelpernull_String
	Court     whereHelpernull_String
	Judgedate whereHelpernull_String
	Subbody   whereHelpernull_String
	Type      whereHelperint
}{
	Rowid:     whereHelperint64{field: "\"indexes\".\"rowid\""},
	UUID:      whereHelpernull_String{field: "\"indexes\".\"uuid\""},
	SuitNo:    whereHelpernull_String{field: "\"indexes\".\"SuitNo\""},
	Title:     whereHelpernull_String{field: "\"indexes\".\"title\""},
	Header:    whereHelpernull_String{field: "\"indexes\".\"header\""},
	Court:     whereHelpernull_String{field: "\"indexes\".\"court\""},
	Judgedate: whereHelpernull_String{field: "\"indexes\".\"judgedate\""},
	Subbody:   whereHelpernull_String{field: "\"indexes\".\"subbody\""},
	Type:      whereHelperint{field: "\"indexes\".\"type\""},
}

// IndexRels is where relationship names are stored.
var IndexRels = struct {
}{}

// indexR is where relationships are stored.
type indexR struct {
}

// NewStruct creates a new relationship struct
func (*indexR) NewStruct() *indexR {
	return &indexR{}
}

// indexL is where Load methods for each relationship are stored.
type indexL struct{}

var (
	indexAllColumns            = []string{"rowid", "uuid", "SuitNo", "title", "header", "court", "judgedate", "subbody", "type"}
	indexColumnsWithoutDefault = []string{"uuid", "SuitNo", "title", "header", "court", "judgedate", "subbody", "type"}
	indexColumnsWithDefault    = []string{"rowid"}
	indexPrimaryKeyColumns     = []string{"rowid"}
)

type (
	// IndexSlice is an alias for a slice of pointers to Index.
	// This should generally be used opposed to []Index.
	IndexSlice []*Index

	indexQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	indexType                 = reflect.TypeOf(&Index{})
	indexMapping              = queries.MakeStructMapping(indexType)
	indexPrimaryKeyMapping, _ = queries.BindMapping(indexType, indexMapping, indexPrimaryKeyColumns)
	indexInsertCacheMut       sync.RWMutex
	indexInsertCache          = make(map[string]insertCache)
	indexUpdateCacheMut       sync.RWMutex
	indexUpdateCache          = make(map[string]updateCache)
	indexUpsertCacheMut       sync.RWMutex
	indexUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single index record from the query.
func (q indexQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Index, error) {
	o := &Index{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for indexes")
	}

	return o, nil
}

// All returns all Index records from the query.
func (q indexQuery) All(ctx context.Context, exec boil.ContextExecutor) (IndexSlice, error) {
	var o []*Index

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Index slice")
	}

	return o, nil
}

// Count returns the count of all Index records in the query.
func (q indexQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count indexes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q indexQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if indexes exists")
	}

	return count > 0, nil
}

// Indexes retrieves all the records using an executor.
func Indexes(mods ...qm.QueryMod) indexQuery {
	mods = append(mods, qm.From("\"indexes\""))
	return indexQuery{NewQuery(mods...)}
}

// FindIndex retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIndex(ctx context.Context, exec boil.ContextExecutor, rowid int64, selectCols ...string) (*Index, error) {
	indexObj := &Index{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"indexes\" where \"rowid\"=$1", sel,
	)

	q := queries.Raw(query, rowid)

	err := q.Bind(ctx, exec, indexObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from indexes")
	}

	return indexObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Index) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no indexes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(indexColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	indexInsertCacheMut.RLock()
	cache, cached := indexInsertCache[key]
	indexInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			indexAllColumns,
			indexColumnsWithDefault,
			indexColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(indexType, indexMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(indexType, indexMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"indexes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"indexes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into indexes")
	}

	if !cached {
		indexInsertCacheMut.Lock()
		indexInsertCache[key] = cache
		indexInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Index.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Index) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	indexUpdateCacheMut.RLock()
	cache, cached := indexUpdateCache[key]
	indexUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			indexAllColumns,
			indexPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update indexes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"indexes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, indexPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(indexType, indexMapping, append(wl, indexPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update indexes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for indexes")
	}

	if !cached {
		indexUpdateCacheMut.Lock()
		indexUpdateCache[key] = cache
		indexUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q indexQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for indexes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for indexes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IndexSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indexPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"indexes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, indexPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in index slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all index")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Index) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no indexes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(indexColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	indexUpsertCacheMut.RLock()
	cache, cached := indexUpsertCache[key]
	indexUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			indexAllColumns,
			indexColumnsWithDefault,
			indexColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			indexAllColumns,
			indexPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert indexes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(indexPrimaryKeyColumns))
			copy(conflict, indexPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"indexes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(indexType, indexMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(indexType, indexMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert indexes")
	}

	if !cached {
		indexUpsertCacheMut.Lock()
		indexUpsertCache[key] = cache
		indexUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Index record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Index) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Index provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), indexPrimaryKeyMapping)
	sql := "DELETE FROM \"indexes\" WHERE \"rowid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from indexes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for indexes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q indexQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no indexQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from indexes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for indexes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IndexSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indexPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"indexes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, indexPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from index slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for indexes")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Index) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIndex(ctx, exec, o.Rowid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IndexSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IndexSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), indexPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"indexes\".* FROM \"indexes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, indexPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IndexSlice")
	}

	*o = slice

	return nil
}

// IndexExists checks if the Index row exists.
func IndexExists(ctx context.Context, exec boil.ContextExecutor, rowid int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"indexes\" where \"rowid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, rowid)
	}
	row := exec.QueryRowContext(ctx, sql, rowid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if indexes exists")
	}

	return exists, nil
}
