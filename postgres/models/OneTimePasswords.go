// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OneTimePassword is an object representing the database table.
type OneTimePassword struct {
	ID           int         `boil:"Id" json:"Id" toml:"Id" yaml:"Id"`
	Code         null.String `boil:"Code" json:"Code,omitempty" toml:"Code" yaml:"Code,omitempty"`
	CustomerId   null.Int    `boil:"CustomerId" json:"CustomerId,omitempty" toml:"CustomerId" yaml:"CustomerId,omitempty"`
	SystemId     null.String `boil:"SystemId" json:"SystemId,omitempty" toml:"SystemId" yaml:"SystemId,omitempty"`
	LicenseId    null.Int64  `boil:"LicenseId" json:"LicenseId,omitempty" toml:"LicenseId" yaml:"LicenseId,omitempty"`
	CreationTime null.Time   `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	TenantId     null.Int    `boil:"TenantId" json:"TenantId,omitempty" toml:"TenantId" yaml:"TenantId,omitempty"`

	R *oneTimePasswordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oneTimePasswordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OneTimePasswordColumns = struct {
	ID           string
	Code         string
	CustomerId   string
	SystemId     string
	LicenseId    string
	CreationTime string
	TenantId     string
}{
	ID:           "Id",
	Code:         "Code",
	CustomerId:   "CustomerId",
	SystemId:     "SystemId",
	LicenseId:    "LicenseId",
	CreationTime: "CreationTime",
	TenantId:     "TenantId",
}

// Generated where

var OneTimePasswordWhere = struct {
	ID           whereHelperint
	Code         whereHelpernull_String
	CustomerId   whereHelpernull_Int
	SystemId     whereHelpernull_String
	LicenseId    whereHelpernull_Int64
	CreationTime whereHelpernull_Time
	TenantId     whereHelpernull_Int
}{
	ID:           whereHelperint{field: "\"OneTimePasswords\".\"Id\""},
	Code:         whereHelpernull_String{field: "\"OneTimePasswords\".\"Code\""},
	CustomerId:   whereHelpernull_Int{field: "\"OneTimePasswords\".\"CustomerId\""},
	SystemId:     whereHelpernull_String{field: "\"OneTimePasswords\".\"SystemId\""},
	LicenseId:    whereHelpernull_Int64{field: "\"OneTimePasswords\".\"LicenseId\""},
	CreationTime: whereHelpernull_Time{field: "\"OneTimePasswords\".\"CreationTime\""},
	TenantId:     whereHelpernull_Int{field: "\"OneTimePasswords\".\"TenantId\""},
}

// OneTimePasswordRels is where relationship names are stored.
var OneTimePasswordRels = struct {
}{}

// oneTimePasswordR is where relationships are stored.
type oneTimePasswordR struct {
}

// NewStruct creates a new relationship struct
func (*oneTimePasswordR) NewStruct() *oneTimePasswordR {
	return &oneTimePasswordR{}
}

// oneTimePasswordL is where Load methods for each relationship are stored.
type oneTimePasswordL struct{}

var (
	oneTimePasswordAllColumns            = []string{"Id", "Code", "CustomerId", "SystemId", "LicenseId", "CreationTime", "TenantId"}
	oneTimePasswordColumnsWithoutDefault = []string{"Id", "Code", "CustomerId", "SystemId", "LicenseId", "CreationTime", "TenantId"}
	oneTimePasswordColumnsWithDefault    = []string{}
	oneTimePasswordPrimaryKeyColumns     = []string{"Id"}
)

type (
	// OneTimePasswordSlice is an alias for a slice of pointers to OneTimePassword.
	// This should generally be used opposed to []OneTimePassword.
	OneTimePasswordSlice []*OneTimePassword

	oneTimePasswordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oneTimePasswordType                 = reflect.TypeOf(&OneTimePassword{})
	oneTimePasswordMapping              = queries.MakeStructMapping(oneTimePasswordType)
	oneTimePasswordPrimaryKeyMapping, _ = queries.BindMapping(oneTimePasswordType, oneTimePasswordMapping, oneTimePasswordPrimaryKeyColumns)
	oneTimePasswordInsertCacheMut       sync.RWMutex
	oneTimePasswordInsertCache          = make(map[string]insertCache)
	oneTimePasswordUpdateCacheMut       sync.RWMutex
	oneTimePasswordUpdateCache          = make(map[string]updateCache)
	oneTimePasswordUpsertCacheMut       sync.RWMutex
	oneTimePasswordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single oneTimePassword record from the query.
func (q oneTimePasswordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OneTimePassword, error) {
	o := &OneTimePassword{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for OneTimePasswords")
	}

	return o, nil
}

// All returns all OneTimePassword records from the query.
func (q oneTimePasswordQuery) All(ctx context.Context, exec boil.ContextExecutor) (OneTimePasswordSlice, error) {
	var o []*OneTimePassword

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OneTimePassword slice")
	}

	return o, nil
}

// Count returns the count of all OneTimePassword records in the query.
func (q oneTimePasswordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count OneTimePasswords rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oneTimePasswordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if OneTimePasswords exists")
	}

	return count > 0, nil
}

// OneTimePasswords retrieves all the records using an executor.
func OneTimePasswords(mods ...qm.QueryMod) oneTimePasswordQuery {
	mods = append(mods, qm.From("\"OneTimePasswords\""))
	return oneTimePasswordQuery{NewQuery(mods...)}
}

// FindOneTimePassword retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOneTimePassword(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*OneTimePassword, error) {
	oneTimePasswordObj := &OneTimePassword{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"OneTimePasswords\" where \"Id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, oneTimePasswordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from OneTimePasswords")
	}

	return oneTimePasswordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OneTimePassword) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no OneTimePasswords provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(oneTimePasswordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oneTimePasswordInsertCacheMut.RLock()
	cache, cached := oneTimePasswordInsertCache[key]
	oneTimePasswordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oneTimePasswordAllColumns,
			oneTimePasswordColumnsWithDefault,
			oneTimePasswordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oneTimePasswordType, oneTimePasswordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oneTimePasswordType, oneTimePasswordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"OneTimePasswords\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"OneTimePasswords\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into OneTimePasswords")
	}

	if !cached {
		oneTimePasswordInsertCacheMut.Lock()
		oneTimePasswordInsertCache[key] = cache
		oneTimePasswordInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OneTimePassword.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OneTimePassword) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	oneTimePasswordUpdateCacheMut.RLock()
	cache, cached := oneTimePasswordUpdateCache[key]
	oneTimePasswordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oneTimePasswordAllColumns,
			oneTimePasswordPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update OneTimePasswords, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"OneTimePasswords\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, oneTimePasswordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oneTimePasswordType, oneTimePasswordMapping, append(wl, oneTimePasswordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update OneTimePasswords row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for OneTimePasswords")
	}

	if !cached {
		oneTimePasswordUpdateCacheMut.Lock()
		oneTimePasswordUpdateCache[key] = cache
		oneTimePasswordUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q oneTimePasswordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for OneTimePasswords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for OneTimePasswords")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OneTimePasswordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oneTimePasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"OneTimePasswords\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, oneTimePasswordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in oneTimePassword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all oneTimePassword")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OneTimePassword) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no OneTimePasswords provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(oneTimePasswordColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oneTimePasswordUpsertCacheMut.RLock()
	cache, cached := oneTimePasswordUpsertCache[key]
	oneTimePasswordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			oneTimePasswordAllColumns,
			oneTimePasswordColumnsWithDefault,
			oneTimePasswordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			oneTimePasswordAllColumns,
			oneTimePasswordPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert OneTimePasswords, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(oneTimePasswordPrimaryKeyColumns))
			copy(conflict, oneTimePasswordPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"OneTimePasswords\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(oneTimePasswordType, oneTimePasswordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oneTimePasswordType, oneTimePasswordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert OneTimePasswords")
	}

	if !cached {
		oneTimePasswordUpsertCacheMut.Lock()
		oneTimePasswordUpsertCache[key] = cache
		oneTimePasswordUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OneTimePassword record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OneTimePassword) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OneTimePassword provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oneTimePasswordPrimaryKeyMapping)
	sql := "DELETE FROM \"OneTimePasswords\" WHERE \"Id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from OneTimePasswords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for OneTimePasswords")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oneTimePasswordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no oneTimePasswordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from OneTimePasswords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for OneTimePasswords")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OneTimePasswordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oneTimePasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"OneTimePasswords\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oneTimePasswordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oneTimePassword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for OneTimePasswords")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OneTimePassword) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOneTimePassword(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OneTimePasswordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OneTimePasswordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oneTimePasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"OneTimePasswords\".* FROM \"OneTimePasswords\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, oneTimePasswordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OneTimePasswordSlice")
	}

	*o = slice

	return nil
}

// OneTimePasswordExists checks if the OneTimePassword row exists.
func OneTimePasswordExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"OneTimePasswords\" where \"Id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if OneTimePasswords exists")
	}

	return exists, nil
}
